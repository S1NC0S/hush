{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","password","setPassword","hiddenPassword","setHiddenPassword","plaintext","setPlaintext","encrypted","setEncrypted","className","value","onFocus","e","target","select","onChange","hidden","i","length","updatePW","CryptoJS","AES","encrypt","toString","decrypt","enc","Utf8","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAiDeA,MA7Cf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAqBA,OACE,sBAAKC,UAAU,MAAf,UACE,gCACE,sCACA,8CAEF,oCACE,6CACE,uBAAK,0BAAUA,UAAU,WAAWC,MAAOP,EAAgBQ,QAAS,SAACC,GAAOA,EAAEC,OAAOC,UAAWC,SAAU,SAACH,IAjBlG,SAACX,GAChBC,EAAYD,GAEZ,IADA,IAAIe,EAAS,GACJC,EAAI,EAAGA,EAAIhB,EAASiB,OAAQD,IACnCD,GAAU,IAEZZ,EAAkBY,GAWqGG,CAASP,EAAEC,OAAOH,UACnI,uBACA,uBAAK,+CACL,uBAAK,0BAAUD,UAAU,YAAYC,MAAOL,EAAWM,QAAS,SAACC,GAAOA,EAAEC,OAAOC,UAAWC,SAAU,SAACH,IA9B/F,SAACP,GACfC,EAAaD,GACbG,EAAaY,IAASC,IAAIC,QAAQjB,EAAWJ,GAAUsB,YA4B4DD,CAAQV,EAAEC,OAAOH,UAC9H,uBACA,uBAAK,8CACL,uBAAK,0BAAUD,UAAU,YAAYC,MAAOH,EAAWI,QAAS,SAACC,GAAOA,EAAEC,OAAOC,UAAWC,SAAU,SAACH,IA5B/F,SAACL,GACfC,EAAaD,GACbD,EAAac,IAASC,IAAIG,QAAQjB,EAAWN,GAAUsB,SAASH,IAASK,IAAIC,OA0BsCF,CAAQZ,EAAEC,OAAOH,iBC/BzHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ab1a9741.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport CryptoJS from 'crypto-js';\n\nfunction App() {\n  const [password, setPassword] = useState(\"\");\n  const [hiddenPassword, setHiddenPassword] = useState(\"\");\n  const [plaintext, setPlaintext] = useState(\"\");\n  const [encrypted, setEncrypted] = useState(\"\");\n\n  const encrypt = (plaintext) => {\n    setPlaintext(plaintext);\n    setEncrypted(CryptoJS.AES.encrypt(plaintext, password).toString());\n  }\n\n  const decrypt = (encrypted) => {\n    setEncrypted(encrypted);\n    setPlaintext(CryptoJS.AES.decrypt(encrypted, password).toString(CryptoJS.enc.Utf8));\n  }\n\n  const updatePW = (password) => {\n    setPassword(password)\n    let hidden = \"\";\n    for (let i = 0; i < password.length; i++) {\n      hidden += \"*\";\n    }\n    setHiddenPassword(hidden)\n  }\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <h1>Hush</h1>\n        <h1>NFT Forge</h1>\n      </nav>\n      <section>\n        <label>Password</label>\n          <br/><textarea className=\"password\" value={hiddenPassword} onFocus={(e) => {e.target.select()}} onChange={(e)=>{ updatePW(e.target.value) }}/>\n          <br/>\n          <br/><label>Plain Text</label>\n          <br/><textarea className=\"plaintext\" value={plaintext} onFocus={(e) => {e.target.select()}} onChange={(e)=>{ encrypt(e.target.value) }}/>\n          <br/>\n          <br/><label>Encrypted</label>\n          <br/><textarea className=\"encrypted\" value={encrypted} onFocus={(e) => {e.target.select()}} onChange={(e)=>{ decrypt(e.target.value) }}/>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}